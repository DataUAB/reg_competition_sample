{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# For this competition we will try to predict the estimated transaction value in USD for bitcoins. This dataset contains bitcoin data collected since April 28, 2013. This small guide will show you what features are present in the data and what each of these represents. We also include a small example code that you can use to upload our submission to [Codalab](https://competitions.codalab.org/competitions/20122). For a guide on how to upload a submission check the Codalab Submission Guide.pdf in Caronte&nbsp;&nbsp;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Here is a list of the features present in our data and what they represent\n",
    "\n",
    "* **btc_market_price** : Average USD market price across major bitcoin exchanges.\n",
    "\n",
    "* **btc_total_bitcoins** : The total number of bitcoins that have already been mined.\n",
    "\n",
    "* **btc_market_cap** : The total USD value of bitcoin supply in circulation.\n",
    "\n",
    "* **btc_trade_volume** : The total USD value of trading volume on major bitcoin exchanges.\n",
    "\n",
    "* **btc_blocks_size** : The total size of all block headers and transactions.\n",
    "\n",
    "* **btc_avg_block_size** : The average block size in MB.\n",
    "\n",
    "* **btc_n_orphaned_blocks** : The total number of blocks mined but ultimately not attached to the main Bitcoin blockchain.\n",
    "\n",
    "* **btc_n_transactions_per_block** : The average number of transactions per block.\n",
    "\n",
    "* **btc_median_confirmation_time** : The median time for a transaction to be accepted into a mined block.\n",
    "\n",
    "* **btc_hash_rate** : The estimated number of tera hashes per second the Bitcoin network is performing.\n",
    "\n",
    "* **btc_difficulty** : A relative measure of how difficult it is to find a new block.\n",
    "\n",
    "* **btc_miners_revenue** : Total value of coinbase block rewards and transaction fees paid to miners.\n",
    "\n",
    "* **btc_transaction_fees** : The total value of all transaction fees paid to miners.\n",
    "\n",
    "* **btc_cost_per_transaction_percent** : miners revenue as percentage of the transaction volume.\n",
    "\n",
    "* **btc_cost_per_transaction** : miners revenue divided by the number of transactions.\n",
    "\n",
    "* **btc_n_unique_addresses** : The total number of unique addresses used on the Bitcoin blockchain.\n",
    "\n",
    "* **btc_n_transactions** : The number of daily confirmed Bitcoin transactions.\n",
    "\n",
    "* **btc_n_transactions_total** : Total number of transactions.\n",
    "\n",
    "* **btc_n_transactions_excluding_popular** : The total number of Bitcoin transactions, excluding the 100 most popular addresses.\n",
    "\n",
    "* **btc_n_transactions_excluding_chains_longer_than_100** : The total number of Bitcoin transactions per day excluding long transaction chains.\n",
    "\n",
    "* **btc_output_volume** : The total value of all transaction outputs per day.\n",
    "\n",
    "* **btc_estimated_transaction_volume** : The total estimated value of transactions on the Bitcoin blockchain.&nbsp;&nbsp;\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What we will predict: \n",
    "### btc_estimated_transaction_volume_usd: Is the last column of our data and represents the bitcoin estimated transaction value in USD value. This will be our target value&nbsp;&nbsp;\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### This is a small example of how you should upload a submission to our competition. Good Luck!!  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data and convert it to numpy array\n",
    "data = pd.read_csv(\"data/bitcoin_dataset.csv\") # the entire training data\n",
    "data = data.iloc[:, :].values \n",
    "test_data = pd.read_csv(\"data/test.csv\") # the data we want to predict\n",
    "test_data = test_data.iloc[:,:].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split our data into training and validation set\n",
    "x_train, x_val, y_train, y_val = train_test_split(\n",
    "        data[:, : -1], data[:, -1], test_size=0.33, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Build our regressor and train it on our data\n",
    "regressor = linear_model.LinearRegression()\n",
    "regressor.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error: 383720275339242624.000\n",
      "Variance score: 0.40\n"
     ]
    }
   ],
   "source": [
    "# Test our model on the validation data to see how well it did\n",
    "preds = regressor.predict(x_val)\n",
    "\n",
    "# Mean squared Error (the smaller the better)\n",
    "print(\"Mean Squared Error: {:.3f}\".format(mean_squared_error(y_val, preds)))\n",
    "\n",
    "# Explained variance score: 1 is perfect prediction \n",
    "# This will be the metric used in the competition\n",
    "print(\"Variance score: {:.2f}\".format(r2_score(y_val, preds)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Residual plots are a good way to visualize the performance of your model. If your model is performing well your data should be randomly scattered around line 0. If you get some structure in your data, your model is not performing well and you should go back and check what you have done"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xmin = min(int(np.min(regressor.predict(x_val))), int(np.min(regressor.predict(x_train))))\n",
    "xmax = max(int(np.max(regressor.predict(x_val))), int(np.max(regressor.predict(x_train))))\n",
    "\n",
    "# Visualize the results with a residual plot\n",
    "plt.scatter(regressor.predict(x_train), regressor.predict(x_train) - y_train, color='blue')\n",
    "plt.scatter(regressor.predict(x_val), regressor.predict(x_val) - y_val, color='green')\n",
    "plt.hlines(y=0, xmin=xmin, xmax=xmax)\n",
    "plt.title(\"Residual plot using training (blue) and validation (green) data\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can now use our regressor on the test data for submission\n",
    "test_preds = regressor.predict(test_data)\n",
    "\n",
    "# Generate pickle files with predictions\n",
    "# this is the file you have to compressed and upload to CodaLab\n",
    "with open(\"output/(predictions_class.pkl\", 'wb') as outfile:\n",
    "    pickle.dump(test_preds, outfile, protocol=2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
